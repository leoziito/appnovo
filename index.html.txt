<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Não quero ir só</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            font-family: "Inter", sans-serif;
        }
        .screen {
            display: none; /* Todas as telas ocultas por padrão */
        }
        .screen.active {
            display: block; /* A tela ativa é exibida */
        }
        /* Animações CSS */
        @keyframes fadeInDown {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes fadeInUp {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        @keyframes zoomIn {
            from { transform: scale(0.95); opacity: 0; }
            to { transform: scale(1); opacity: 1; }
        }
        .animate-fade-in-down { animation: fadeInDown 0.5s ease-out; }
        .animate-fade-in-up { animation: fadeInUp 0.5s ease-out; }
        .animate-fade-in { animation: fadeIn 0.3s ease-out; }
        .animate-zoom-in { animation: zoomIn 0.3s ease-out; }
    </style>
</head>
<body class="font-sans antialiased text-gray-900 bg-gray-50 min-h-screen">

    <!-- Main App Container -->
    <div id="app-container" class="min-h-screen">

        <!-- Auth Screen -->
        <div id="auth-screen" class="screen active min-h-screen flex items-center justify-center bg-gradient-to-br from-purple-400 to-indigo-600 p-4">
            <div class="bg-white p-8 rounded-xl shadow-2xl w-full max-w-md transform transition-all duration-500 ease-in-out scale-95 hover:scale-100">
                <h1 class="text-4xl font-extrabold text-center text-indigo-700 mb-2 animate-fade-in-down">
                    Não quero ir só
                </h1>
                <p class="text-center text-gray-600 mb-6 animate-fade-in-up">
                    Conectando pessoas para viverem novas experiências, juntas.
                </p>
                <h2 id="auth-title" class="text-3xl font-bold text-center text-gray-800 mb-6">
                    Entrar
                </h2>
                <form id="auth-form" class="space-y-4">
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="auth-email">
                            Email
                        </label>
                        <input
                            type="email"
                            id="auth-email"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200"
                            placeholder="seuemail@exemplo.com"
                            required
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="auth-password">
                            Senha
                        </label>
                        <div class="relative">
                            <input
                                type="password"
                                id="auth-password"
                                class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-transparent transition duration-200 pr-10"
                                placeholder="********"
                                required
                            />
                            <button
                                type="button"
                                id="toggle-password-visibility"
                                class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                            >
                                <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>
                            </button>
                        </div>
                    </div>
                    <button
                        type="submit"
                        id="auth-button"
                        class="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-indigo-700 transition duration-300 transform hover:scale-105 disabled:opacity-50"
                    >
                        Entrar
                    </button>
                </form>
                <div class="mt-6 text-center">
                    <button
                        id="toggle-auth-mode"
                        class="text-indigo-600 hover:text-indigo-800 font-medium transition duration-200"
                    >
                        Não tem uma conta? Cadastre-se
                    </button>
                </div>
                <div class="mt-8 text-center text-gray-600 text-sm">
                    <a href="https://x.com/LuhHeenry" target="_blank" rel="noopener noreferrer" class="hover:underline text-indigo-600">
                        Ideia do app por @LuhHeenry
                    </a>
                </div>
            </div>
        </div>

        <!-- Home/Event List Screen -->
        <div id="home-screen" class="screen min-h-screen bg-gray-100 p-4 pb-20 overflow-y-auto">
            <h1 class="text-4xl font-extrabold text-center text-indigo-700 mb-6 animate-fade-in-down">
                Não quero ir só
            </h1>
            <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Eventos Próximos</h2>
            <button
                id="create-event-btn"
                class="w-full bg-green-500 text-white py-3 rounded-lg font-semibold text-lg hover:bg-green-600 transition duration-300 transform hover:scale-105 mb-4 shadow-md"
            >
                + Criar Novo Evento
            </button>

            <div class="mb-4 space-y-3">
                <div class="relative">
                    <input
                        type="text"
                        id="search-term"
                        placeholder="Pesquisar por nome ou descrição..."
                        class="w-full px-4 py-2 pl-10 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200 shadow-sm"
                    />
                    <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
                </div>
                <input
                    type="text"
                    id="filter-location"
                    placeholder="Filtrar por localização (cidade/estado)..."
                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200 shadow-sm"
                    list="location-suggestions-filter-datalist"
                />
                <datalist id="location-suggestions-filter-datalist"></datalist>
            </div>

            <div id="events-list" class="space-y-4">
                <!-- Events will be rendered here by JavaScript -->
            </div>
            <p id="no-events-message" class="text-center text-gray-600 mt-8 hidden">Nenhum evento encontrado. Crie um!</p>
        </div>

        <!-- Profile Screen -->
        <div id="profile-screen" class="screen min-h-screen bg-gray-100 p-4 flex flex-col items-center">
            <div class="bg-white p-6 rounded-xl shadow-lg w-full max-w-2xl mx-auto mt-8 transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Meu Perfil</h2>
                <form id="profile-form" class="space-y-4">
                    <div class="flex flex-col items-center mb-4">
                        <img
                            id="profile-image-preview"
                            src="https://placehold.co/128x128/cccccc/333333?text=Sem+Foto"
                            alt="Foto de Perfil"
                            class="w-32 h-32 rounded-full object-cover border-4 border-indigo-300 shadow-md transition-transform duration-300 transform hover:scale-105"
                        />
                        <label for="profile-image-input" class="mt-4 px-4 py-2 bg-indigo-500 text-white rounded-lg cursor-pointer hover:bg-indigo-600 transition duration-200 transform hover:scale-105">
                            Alterar Foto
                        </label>
                        <input
                            type="file"
                            id="profile-image-input"
                            accept="image/*"
                            class="hidden"
                        />
                    </div>

                    <div class="text-center mb-4">
                        <p id="profile-display-name" class="text-gray-800 text-xl font-bold">Nome não definido</p>
                        <p id="profile-display-uid" class="text-gray-600 text-sm"></p>
                        <p id="profile-display-location" class="text-gray-600 text-sm">Localização não definida</p>
                    </div>

                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="profile-name">Nome</label>
                        <input
                            type="text"
                            id="profile-name"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            required
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="profile-age">Idade</label>
                        <input
                            type="number"
                            id="profile-age"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="profile-location">Localização (Cidade/Estado)</label>
                        <input
                            type="text"
                            id="profile-location"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            placeholder="Ex: Rio de Janeiro, RJ"
                            list="profile-location-suggestions-datalist"
                        />
                        <datalist id="profile-location-suggestions-datalist"></datalist>
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="profile-interests">Interesses (separados por vírgula)</label>
                        <input
                            type="text"
                            id="profile-interests"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="profile-bio">Biografia</label>
                        <textarea
                            id="profile-bio"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 h-24 resize-none transition duration-200"
                        ></textarea>
                    </div>
                    <button
                        type="submit"
                        id="save-profile-btn"
                        class="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-indigo-700 transition duration-300 transform hover:scale-105 disabled:opacity-50"
                    >
                        Salvar Perfil
                    </button>
                </form>

                <div class="mt-6 space-y-3">
                    <button
                        id="change-password-btn"
                        class="w-full bg-blue-500 text-white py-3 rounded-lg font-semibold text-lg hover:bg-blue-600 transition duration-300 transform hover:scale-105 shadow-md"
                    >
                        Trocar Senha
                    </button>
                    <button
                        id="delete-profile-btn"
                        class="w-full bg-red-500 text-white py-3 rounded-lg font-semibold text-lg hover:bg-red-600 transition duration-300 transform hover:scale-105 shadow-md"
                    >
                        Excluir Perfil Permanentemente
                    </button>
                </div>

                <div class="mt-8 text-center text-gray-600 text-sm">
                    <a href="https://x.com/LuhHeenry" target="_blank" rel="noopener noreferrer" class="hover:underline text-indigo-600">
                        Ideia do app por @LuhHeenry
                    </a>
                </div>
            </div>
        </div>

        <!-- Create Event Screen -->
        <div id="create-event-screen" class="screen min-h-screen bg-gray-100 p-4">
            <div class="bg-white p-6 rounded-xl shadow-lg max-w-md mx-auto mt-8 transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Criar Novo Evento</h2>
                <form id="create-event-form" class="space-y-4">
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="event-name">Nome do Evento</label>
                        <input
                            type="text"
                            id="event-name"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            required
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="event-date">Data (AAAA-MM-DD)</label>
                        <input
                            type="date"
                            id="event-date"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            required
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="event-time">Hora</label>
                        <input
                            type="time"
                            id="event-time"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            required
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="event-location">Localização</label>
                        <input
                            type="text"
                            id="event-location"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            placeholder="Ex: Parque Ibirapuera, São Paulo"
                            required
                            list="create-event-location-suggestions-datalist"
                        />
                        <datalist id="create-event-location-suggestions-datalist"></datalist>
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="event-description">Descrição</label>
                        <textarea
                            id="event-description"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 h-24 resize-none transition duration-200"
                        ></textarea>
                    </div>

                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="event-whatsapp-link">Link Grupo WhatsApp (Opcional)</label>
                        <input
                            type="url"
                            id="event-whatsapp-link"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            placeholder="Ex: https://chat.whatsapp.com/..."
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="event-other-contacts">Outros Contatos (Opcional)</label>
                        <input
                            type="text"
                            id="event-other-contacts"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            placeholder="Ex: @seunome_instagram, (XX) XXXXX-XXXX"
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="event-transportation">Meio de Transporte (Opcional)</label>
                        <select
                            id="event-transportation"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                        >
                            <option value="">Selecione</option>
                            <option value="Uber/99">Uber/99</option>
                            <option value="Metrô">Metrô</option>
                            <option value="Ônibus">Ônibus</option>
                            <option value="Carro Próprio">Carro Próprio</option>
                            <option value="Bicicleta">Bicicleta</option>
                            <option value="Outro">Outro</option>
                        </select>
                    </div>
                    <div class="flex items-center">
                        <input
                            type="checkbox"
                            id="event-split-transportation"
                            class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                        />
                        <label for="event-split-transportation" class="ml-2 block text-sm text-gray-900">
                            Dividir transporte?
                        </label>
                    </div>

                    <button
                        type="submit"
                        id="create-event-submit-btn"
                        class="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-indigo-700 transition duration-300 transform hover:scale-105 disabled:opacity-50"
                    >
                        Criar Evento
                    </button>
                    <button
                        type="button"
                        id="create-event-back-btn"
                        class="w-full mt-2 bg-gray-300 text-gray-800 py-3 rounded-lg font-semibold text-lg hover:bg-gray-400 transition duration-300"
                    >
                        Voltar
                    </button>
                </form>
            </div>
        </div>

        <!-- Edit Event Screen -->
        <div id="edit-event-screen" class="screen min-h-screen bg-gray-100 p-4">
            <div class="bg-white p-6 rounded-xl shadow-lg max-w-md mx-auto mt-8 transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
                <h2 class="text-2xl font-bold text-gray-800 mb-6 text-center">Editar Evento</h2>
                <form id="edit-event-form" class="space-y-4">
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="edit-event-name">Nome do Evento</label>
                        <input
                            type="text"
                            id="edit-event-name"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            required
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="edit-event-date">Data (AAAA-MM-DD)</label>
                        <input
                            type="date"
                            id="edit-event-date"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            required
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="edit-event-time">Hora</label>
                        <input
                            type="time"
                            id="edit-event-time"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            required
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="edit-event-location">Localização</label>
                        <input
                            type="text"
                            id="edit-event-location"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            placeholder="Ex: Parque Ibirapuera, São Paulo"
                            required
                            list="edit-event-location-suggestions-datalist"
                        />
                        <datalist id="edit-event-location-suggestions-datalist"></datalist>
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="edit-event-description">Descrição</label>
                        <textarea
                            id="edit-event-description"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 h-24 resize-none transition duration-200"
                        ></textarea>
                    </div>

                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="edit-event-whatsapp-link">Link Grupo WhatsApp (Opcional)</label>
                        <input
                            type="url"
                            id="edit-event-whatsapp-link"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            placeholder="Ex: https://chat.whatsapp.com/..."
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="edit-event-other-contacts">Outros Contatos (Opcional)</label>
                        <input
                            type="text"
                            id="edit-event-other-contacts"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                            placeholder="Ex: @seunome_instagram, (XX) XXXXX-XXXX"
                        />
                    </div>
                    <div>
                        <label class="block text-gray-700 text-sm font-semibold mb-2" for="edit-event-transportation">Meio de Transporte (Opcional)</label>
                        <select
                            id="edit-event-transportation"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                        >
                            <option value="">Selecione</option>
                            <option value="Uber/99">Uber/99</option>
                            <option value="Metrô">Metrô</option>
                            <option value="Ônibus">Ônibus</option>
                            <option value="Carro Próprio">Carro Próprio</option>
                            <option value="Bicicleta">Bicicleta</option>
                            <option value="Outro">Outro</option>
                        </select>
                    </div>
                    <div class="flex items-center">
                        <input
                            type="checkbox"
                            id="edit-event-split-transportation"
                            class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
                        />
                        <label for="edit-event-split-transportation" class="ml-2 block text-sm text-gray-900">
                            Dividir transporte?
                        </label>
                    </div>

                    <button
                        type="submit"
                        id="edit-event-submit-btn"
                        class="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold text-lg hover:bg-indigo-700 transition duration-300 transform hover:scale-105 disabled:opacity-50"
                    >
                        Atualizar Evento
                    </button>
                    <button
                        type="button"
                        id="edit-event-back-btn"
                        class="w-full mt-2 bg-gray-300 text-gray-800 py-3 rounded-lg font-semibold text-lg hover:bg-gray-400 transition duration-300"
                    >
                        Voltar
                    </button>
                </form>
            </div>
        </div>

        <!-- Event Detail Screen -->
        <div id="event-detail-screen" class="screen min-h-screen bg-gray-100 p-4 pb-20 overflow-y-auto">
            <div class="bg-white p-6 rounded-xl shadow-lg max-w-md mx-auto mt-8 transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
                <h2 id="event-detail-name" class="text-2xl font-bold text-gray-800 mb-4 text-center"></h2>
                <p class="text-gray-600 mb-2"><span class="font-semibold">Data:</span> <span id="event-detail-date"></span> às <span id="event-detail-time"></span></p>
                <p class="text-gray-600 mb-2"><span class="font-semibold">Local:</span> <span id="event-detail-location"></span></p>
                <p id="event-detail-description" class="text-gray-700 mb-4"></p>

                <p id="event-detail-whatsapp-link-display" class="text-blue-600 text-sm mb-1 hidden">
                    <a id="event-detail-whatsapp-link" href="#" target="_blank" rel="noopener noreferrer" class="hover:underline">Grupo WhatsApp</a>
                </p>
                <p id="event-detail-other-contacts-display" class="text-gray-600 text-sm mb-1 hidden">
                    <span class="font-medium">Outros Contatos:</span> <span id="event-detail-other-contacts"></span>
                </p>
                <p id="event-detail-transportation-display" class="text-gray-600 text-sm mb-1 hidden">
                    <span class="font-medium">Transporte:</span> <span id="event-detail-transportation"></span>
                </p>

                <div class="mb-4 mt-4">
                    <h3 class="text-lg font-semibold text-gray-800 mb-2">Criador do Evento:</h3>
                    <div class="flex items-center space-x-3">
                        <img
                            id="event-detail-creator-image"
                            src="https://placehold.co/40x40/cccccc/333333?text=PF"
                            alt="Foto do Criador"
                            class="w-10 h-10 rounded-full object-cover border-2 border-purple-400 cursor-pointer"
                        />
                        <p id="event-detail-creator-name" class="text-gray-700"></p>
                    </div>
                </div>

                <!-- Seção de Comentários -->
                <div class="mt-8 border-t pt-6 border-gray-200">
                    <h3 class="text-xl font-bold text-gray-800 mb-4">Comentários</h3>
                    <div id="comments-list" class="space-y-4 max-h-60 overflow-y-auto p-2 bg-gray-50 rounded-lg border border-gray-200">
                        <!-- Comments will be rendered here by JavaScript -->
                    </div>
                    <p id="no-comments-message" class="text-center text-gray-500 mt-4 hidden">Nenhum comentário ainda. Seja o primeiro!</p>
                    <p id="loading-comments-message" class="text-center text-gray-500 mt-4">Carregando comentários...</p>

                    <div class="mt-4 flex space-x-2">
                        <textarea
                            id="comment-text-input"
                            class="flex-1 px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 resize-none"
                            placeholder="Adicionar um comentário..."
                            rows="2"
                        ></textarea>
                        <button
                            id="post-comment-btn"
                            class="bg-indigo-600 text-white px-4 py-2 rounded-lg font-semibold hover:bg-indigo-700 transition duration-300 disabled:opacity-50"
                        >
                            Postar
                        </button>
                    </div>
                </div>
            </div>
            <button
                type="button"
                id="event-detail-back-btn"
                class="w-full mt-4 bg-gray-300 text-gray-800 py-3 rounded-lg font-semibold text-lg hover:bg-gray-400 transition duration-300"
            >
                Voltar
            </button>
        </div>

        <!-- Global Chat Screen -->
        <div id="global-chat-screen" class="screen min-h-screen bg-gray-100 flex flex-col p-4 pb-20 overflow-y-auto items-center">
            <div class="bg-white p-6 rounded-xl shadow-lg w-full max-w-2xl flex-1 mb-4 flex flex-col transform transition-all duration-300 ease-in-out scale-95 hover:scale-100">
                <h2 class="text-2xl font-bold text-gray-800 mb-4 text-center">Chat Global</h2>
                <div id="messages-list" class="flex-1 overflow-y-auto mb-4 p-2 border rounded-lg bg-gray-50">
                    <!-- Messages will be rendered here by JavaScript -->
                </div>
                <p id="no-messages-message" class="text-center text-gray-500 mt-4 hidden">Nenhuma mensagem ainda. Diga olá para todos!</p>
                <p id="loading-messages-message" class="text-center text-gray-500 mt-4">Carregando mensagens...</p>
                <div class="flex">
                    <input
                        type="text"
                        id="chat-message-input"
                        class="flex-1 px-4 py-2 border border-gray-300 rounded-l-lg focus:ring-2 focus:ring-indigo-500 transition duration-200"
                        placeholder="Digite sua mensagem..."
                    />
                    <button
                        id="send-message-btn"
                        class="bg-indigo-600 text-white px-4 py-2 rounded-r-lg font-semibold hover:bg-indigo-700 transition duration-300 disabled:opacity-50"
                    >
                        Enviar
                    </button>
                </div>
            </div>
        </div>

    </div>

    <!-- Fixed Bottom Navigation (visible after login) -->
    <div id="bottom-nav" class="fixed bottom-0 left-0 right-0 bg-white shadow-lg p-4 flex justify-around border-t border-gray-200 z-40 hidden">
        <button id="nav-home-btn" class="flex flex-col items-center text-sm font-medium text-gray-500 hover:text-indigo-600 transition duration-200">
            <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m0 0l7 7m-10-7v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001 1h3v-3m0 0h6v3m0 0h3a1 1 0 001-1v-4m-14 0h-3a1 1 0 01-1-1V7a1 1 0 011-1h3m7 0h3a1 1 0 011 1v4a1 1 0 01-1 1h-3"></path></svg>
            <span>Eventos</span>
        </button>
        <button id="nav-profile-btn" class="flex flex-col items-center text-sm font-medium text-gray-500 hover:text-indigo-600 transition duration-200">
            <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg>
            <span>Perfil</span>
        </button>
        <button id="nav-global-chat-btn" class="flex flex-col items-center text-sm font-medium text-gray-500 hover:text-indigo-600 transition duration-200">
            <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path></svg>
            <span>Chat Global</span>
        </button>
        <button id="nav-logout-btn" class="flex flex-col items-center text-sm font-medium text-gray-500 hover:text-red-500 transition duration-200">
            <svg class="w-6 h-6 mb-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path></svg>
            <span>Sair</span>
        </button>
    </div>

    <!-- Floating Message Container -->
    <div id="floating-message-container"></div>

    <!-- Confirmation Modal Container -->
    <div id="confirmation-modal-container"></div>

    <!-- Change Password Modal Container -->
    <div id="change-password-modal-container"></div>

    <!-- Photo Modal Container -->
    <div id="photo-modal-container"></div>


    <!-- Firebase SDKs -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";
        import { 
            getAuth, 
            createUserWithEmailAndPassword, 
            signInWithEmailAndPassword, 
            signOut, 
            onAuthStateChanged,
            updatePassword,
            reauthenticateWithCredential,
            EmailAuthProvider,
            deleteUser
        } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-auth.js";
        import { 
            getFirestore, 
            doc, 
            getDoc, 
            setDoc, 
            updateDoc, 
            onSnapshot, 
            collection, 
            query, 
            where, 
            addDoc, 
            getDocs, 
            serverTimestamp, 
            deleteDoc,
            orderBy
        } from "https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore.js";

        // Global Firebase Vars (will be initialized later)
        let app;
        let auth;
        let db;
        let currentUserId = null;
        let projectId = null; // Will be set from firebaseConfig

        // Firebase Config (Replace with your actual Firebase project config)
        const firebaseConfig = {
            apiKey: "AIzaSyAkYtTPiSWopuyG1WyOgLniCYtUvDjezNo",
            authDomain: "naoqueroirso.firebaseapp.com",
            projectId: "naoqueroirso",
            storageBucket: "naoqueroirso.firebasestorage.app",
            messagingSenderId: "936060989706",
            appId: "1:936060989706:web:8391e45215abd21f750af3"
        };

        // ImgBB API Key
        const IMGBB_API_KEY = "9a792281a6220ed358215ad0c1e4162e";

        // Mock Locations for Datalists
        const MOCK_LOCATIONS = [
            "Rio de Janeiro, RJ", "Duque de Caxias, RJ", "Saracuruna, RJ", "Niterói, RJ",
            "São Gonçalo, RJ", "Nova Iguaçu, RJ", "Cabo Frio, RJ", "Búzios, RJ",
            "Angra dos Reis, RJ", "Paraty, RJ", "Petrópolis, RJ", "Teresópolis, RJ",
            "Volta Redonda, RJ", "Macaé, RJ", "Campos dos Goytacazes, RJ", "Resende, RJ",
            "Barra Mansa, RJ", "Itaboraí, RJ", "Queimados, RJ", "São João de Meriti, RJ",
            "Nilópolis, RJ", "Belford Roxo, RJ", "Magé, RJ", "Guapimirim, RJ",
            "Itaguaí, RJ", "Mangaratiba, RJ", "Araruama, RJ", "Saquarema, RJ",
            "Maricá, RJ", "Rio das Ostras, RJ", "Casimiro de Abreu, RJ", "Cachoeiras de Macacu, RJ",
            "Tanguá, RJ", "Seropédica, RJ", "Japeri, RJ", "Mesquita, RJ",
            "Engenheiro Pedreira, RJ", "Miguel Pereira, RJ", "Vassouras, RJ", "Valença, RJ",
            "Barra do Piraí, RJ", "Piraí, RJ", "Três Rios, RJ", "Paraíba do Sul, RJ",
            "Areal, RJ", "Sapucaia, RJ", "Sumidouro, RJ", "Cantagalo, RJ",
            "Cordeiro, RJ", "Nova Friburgo, RJ", "Bom Jardim, RJ", "Duas Barras, RJ",
            "Carmo, RJ", "São Sebastião do Alto, RJ", "Santa Maria Madalena, RJ",
            "Conceição de Macabu, RJ", "Carapebus, RJ", "Quissamã, RJ", "Cardoso Moreira, RJ",
            "São Fidélis, RJ", "São Francisco de Itabapoana, RJ", "Italva, RJ",
            "Cambuci, RJ", "Miracema, RJ", "Laje do Muriaé, RJ", "Natividade, RJ",
            "Porciúncula, RJ", "Varre-Sai, RJ", "Bom Jesus do Itabapoana, RJ", "Itaperuna, RJ",
            "São José de Ubá, RJ", "Aperibé, RJ", "Santo Antônio de Pádua, RJ",
            "Itaocara, RJ", "São João da Barra, RJ", "Quatis, RJ", "Porto Real, RJ",
            "São Paulo, SP", "Campinas, SP", "Guarulhos, SP", "Osasco, SP",
            "Santo André, SP", "São Bernardo do Campo, SP", "São Caetano do Sul, SP",
            "Sorocaba, SP", "Ribeirão Preto, SP", "Santos, SP", "Jundiaí, SP",
            "São José dos Campos, SP", "Piracicaba, SP", "Bauru, SP", "São Carlos, SP",
            "Araraquara, SP", "Presidente Prudente, SP", "Marília, SP", "Franca, SP",
            "Taubaté, SP", "São Vicente, SP", "Praia Grande, SP", "Cubatão, SP",
            "Guarujá, SP", "Mogi das Cruzes, SP", "Suzano, SP", "Diadema, SP",
            "Carapicuíba, SP", "Barueri, SP", "Cotia, SP", "Itaquaquecetuba, SP",
            "Taboão da Serra, SP", "Embu das Artes, SP", "Ferraz de Vasconcelos, SP",
            "Mauá, SP", "Poá, SP", "Santa Bárbara d'Oeste, SP", "Americana, SP",
            "Limeira, SP", "Rio Claro, SP", "Indaiatuba, SP", "Sumaré, SP",
            "Hortolândia, SP", "Jacareí, SP", "Pindamonhangaba, SP", "Lorena, SP",
            "Ubatuba, SP", "Ilhabela, SP", "Campos do Jordão, SP", "Atibaia, SP",
            "Bragança Paulista, SP", "Itu, SP", "Salto, SP", "Votorantim, SP",
            "Araçatuba, SP", "São José do Rio Preto, SP", "Catanduva, SP",
            "Barretos, SP", "Jaboticabal, SP", "Sertãozinho, SP", "Batatais, SP",
            "Bebedouro, SP", "Jales, SP", "Votuporanga, SP", "Assis, SP",
            "Ourinhos, SP", "Botucatu, SP", "Jaú, SP", "Lins, SP",
            "Birigui, SP", "Penápolis, SP", "Dracena, SP", "Adamantina, SP",
            "Tupã, SP", "Presidente Venceslau, SP", "Andradina, SP", "Itanhaém, SP",
            "Peruíbe, SP", "Mongaguá, SP", "São Roque, SP", "Itapetininga, SP",
            "Tatuí, SP", "Cerquilho, SP", "Boituva, SP", "Capivari, SP",
            "Pirassununga, SP", "Leme, SP", "Porto Ferreira, SP", "Mococa, SP",
            "São João da Boa Vista, SP", "Espírito Santo do Pinhal, SP",
            "Amparo, SP", "Pedreira, SP", "Serra Negra, SP", "Águas de Lindoia, SP",
            "Belo Horizonte, MG", "Uberlândia, MG", "Contagem, MG", "Juiz de Fora, MG",
            "Betim, MG", "Montes Claros, MG", "Uberaba, MG", "Governador Valadares, MG",
            "Ipatinga, MG", "Sete Lagoas, MG", "Divinópolis, MG", "Santa Luzia, MG",
            "Ibirité, MG", "Poços de Caldas, MG", "Patos de Minas, MG", "Teófilo Otoni, MG",
            "Pouso Alegre, MG", "Barbacena, MG", "Sabará, MG", "Varginha, MG",
            "Conselheiro Lafaiete, MG", "Passos, MG", "Mariana, MG", "Ouro Preto, MG",
            "Diamantina, MG", "Tiradentes, MG", "São João del Rei, MG", "Viçosa, MG",
            "Lavras, MG", "Itajubá, MG", "Alfenas, MG", "Manhuaçu, MG",
            "Unaí, MG", "Paracatu, MG", "Curvelo, MG", "João Monlevade, MG",
            "Timóteo, MG", "Coronel Fabriciano, MG", "Itabira, MG", "Cataguases, MG",
            "Leopoldina, MG", "Muriaé, MG", "Ubá, MG", "Formiga, MG",
            "Araxá, MG", "Frutal, MG", "Ituiutaba, MG", "Januária, MG",
            "Pirapora, MG", "Três Corações, MG", "Campo Belo, MG", "Nepomuceno, MG",
            "Guaxupé, MG", "São Sebastião do Paraíso, MG", "Capelinha, MG",
            "Janaúba, MG", "Salinas, MG", "Taiobeiras, MG", "Porteirinha, MG",
            "Araguari, MG", "Patrocínio, MG", "Monte Carmelo, MG", "Coromandel, MG",
            "Sacramento, MG", "Conceição das Alagoas, MG", "Prata, MG",
            "Iturama, MG", "Campina Verde, MG", "Santa Vitória, MG", "Capinópolis, MG",
            "Canápolis, MG", "Centralina, MG", "Araporã, MG", "Indianópolis, MG",
            "Estrela do Sul, MG", "Grupiara, MG", "Cascalho Rico, MG", "Romaria, MG",
            "Douradoquara, MG", "Abadia dos Dourados, MG", "Coromandel, MG",
            "Vazante, MG", "Lagamar, MG", "Lagoa Grande, MG", "Presidente Olegário, MG",
            "São Gonçalo do Abaeté, MG", "Varjão de Minas, MG", "João Pinheiro, MG",
            "Brasilândia de Minas, MG", "Buritizeiro, MG", "Pirapora, MG",
            "São Romão, MG", "Januária, MG", "Pedras de Maria da Cruz, MG",
            "Montalvânia, MG", "Manga, MG", "Matias Cardoso, MG", "Jaíba, MG",
            "Verdelândia, MG", "Monte Azul, MG", "Gameleiras, MG", "Catuti, MG",
            "Pai Pedro, MG", "Varzelândia, MG", "São João da Ponte, MG",
            "Lontra, MG", "Miravânia, MG", "Ubaí, MG", "Fruta de Leite, MG",
            "Indaiabira, MG", "Ninheira, MG", "Novorizonte, MG", "Rio Pardo de Minas, MG",
            "São Francisco, MG", "Taiobeiras, MG", "Berizal, MG", "Curral de Dentro, MG",
            "Divisa Alegre, MG", "Divisópolis, MG", "Felício dos Santos, MG",
            "Francisco Badaró, MG", "Jenipapo de Minas, MG", "Padre Carvalho, MG",
            "Ponto Chique, MG", "Rubelita, MG", "Salinas, MG", "Santa Cruz de Salinas, MG",
            "Santo Antônio do Retiro, MG", "São João do Paraíso, MG", "São Pedro do Suaçuí, MG",
            "Serra Nova, MG", "Vargem Grande do Rio Pardo, MG", "Verdelândia, MG",
            "Almenara, MG", "Itamarandiba, MG", "Capelinha, MG", "Malacacheta, MG",
            "Água Boa, MG", "Carbonita, MG", "Comercinho, MG", "Couto de Magalhães de Minas, MG",
            "Crisólita, MG", "Divinolândia de Minas, MG", "Felício dos Santos, MG",
            "Franciscópolis, MG", "Frei Gaspar, MG", "Itabirinha, MG", "Jacinto, MG",
            "Jequitinhonha, MG", "Joaíma, MG", "Machacalis, MG", "Medina, MG",
            "Monte Formoso, MG", "Nacip Raydan, MG", "Nova Módica, MG",
            "Novo Cruzeiro, MG", "Ouro Verde de Minas, MG", "Padre Paraíso, MG",
            "Palmópolis, MG", "Poté, MG", "São José do Divino, MG",
            "São José do Jacuri, MG", "São Pedro do Suaçuí, MG", "Setubinha, MG",
            "Teófilo Otoni, MG", "Umburatiba, MG", "Virgem da Lapa, MG",
            "Água Comprida, MG", "Campina Verde, MG", "Carneirinho, MG",
            "Comendador Gomes, MG", "Conceição das Alagoas, MG", "Delta, MG",
            "Fronteira, MG", "Goiabeira, MG", "Itapagipe, MG", "Iturama, MG",
            "Limeira do Oeste, MG", "Nova Ponte, MG", "Perdizes, MG", "Planura, MG",
            "Prata, MG", "São Francisco de Sales, MG", "União de Minas, MG",
            "Veríssimo, MG", "Água Boa, MG", "Carbonita, MG", "Comercinho, MG",
            "Couto de Magalhães de Minas, MG", "Crisólita, MG", "Divinolândia de Minas, MG",
            "Felício dos Santos, MG", "Franciscópolis, MG", "Frei Gaspar, MG",
            "Itabirinha, MG", "Jacinto, MG", "Jequitinhonha, MG", "Joaíma, MG",
            "Machacalis, MG", "Medina, MG", "Monte Formoso, MG", "Nacip Raydan, MG",
            "Nova Módica, MG", "Novo Cruzeiro, MG", "Ouro Verde de Minas, MG",
            "Padre Paraíso, MG", "Palmópolis, MG", "Poté, MG", "São José do Divino, MG",
            "São José do Jacuri, MG", "São Pedro do Suaçuí, MG", "Setubinha, MG",
            "Teófilo Otoni, MG", "Umburatiba, MG", "Virgem da Lapa, MG",
            "Salvador, BA", "Feira de Santana, BA", "Vitória da Conquista, BA",
            "Brasília, DF",
            "Curitiba, PR", "Londrina, PR", "Maringá, PR", "Foz do Iguaçu, PR",
            "Porto Alegre, RS", "Caxias do Sul, RS", "Pelotas, RS",
            "Fortaleza, CE", "Caucaia, CE", "Juazeiro do Norte, CE",
            "Recife, PE", "Jaboatão dos Guararapes, PE", "Olinda, PE",
            "Manaus, AM",
            "Belém, PA", "Ananindeua, PA",
            "Vitória, ES", "Vila Velha, ES", "Serra, ES",
            "Florianópolis, SC", "Joinville, SC", "Blumenau, SC",
            "Goiânia, GO", "Aparecida de Goiânia, GO",
            "Campo Grande, MS",
            "João Pessoa, PB",
            "Natal, RN",
            "Maceió, AL",
            "Aracaju, SE",
            "Teresina, PI",
            "São Luís, MA", "Imperatriz, MA",
            "Parnaíba, PI",
            "Mossoró, RN",
            "Campina Grande, PB",
            "Arapiraca, AL",
            "Nossa Senhora do Socorro, SE",
            "Araguaína, TO",
            "Ji-Paraná, RO",
            "Boa Vista, RR",
            "Santana, AP",
            "Cuiabá, MT", "Várzea Grande, MT"
        ].sort();

        // Global App State
        const appState = {
            currentScreen: 'auth',
            userId: null,
            db: null,
            auth: null,
            projectId: null,
            selectedEvent: null,
            profileImageFile: null, // For profile screen upload
            activeListeners: [], // To manage Firestore real-time listeners
        };

        // --- Utility Functions ---

        /**
         * Displays a floating message at the bottom of the screen.
         * @param {string} message The message to display.
         * @param {'success'|'error'} type The type of message (determines color).
         */
        function showMessage(message, type) {
            const container = document.getElementById('floating-message-container');
            if (!container) return;

            const messageElement = document.createElement('div');
            messageElement.className = `fixed bottom-4 left-1/2 -translate-x-1/2 p-3 rounded-lg shadow-lg text-white z-50 flex items-center justify-between animate-fade-in-up ${type === 'success' ? 'bg-green-500' : 'bg-red-500'}`;
            messageElement.innerHTML = `
                <span>${message}</span>
                <button class="ml-4 font-bold text-lg">X</button>
            `;
            container.appendChild(messageElement);

            messageElement.querySelector('button').onclick = () => {
                messageElement.remove();
            };

            setTimeout(() => {
                messageElement.remove();
            }, 3000);
        }

        /**
         * Displays a confirmation modal.
         * @param {string} message The confirmation message.
         * @param {function} onConfirm Callback function for confirmation.
         * @param {function} onCancel Callback function for cancellation.
         */
        function showConfirmationModal(message, onConfirm, onCancel) {
            const container = document.getElementById('confirmation-modal-container');
            if (!container) return;

            const modalElement = document.createElement('div');
            modalElement.className = `fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-fade-in`;
            modalElement.innerHTML = `
                <div class="bg-white p-6 rounded-xl shadow-lg max-w-sm w-full text-center transform scale-95 animate-zoom-in">
                    <p class="text-lg font-semibold mb-4">${message}</p>
                    <div class="flex justify-center space-x-4">
                        <button id="confirm-modal-btn" class="px-5 py-2 bg-red-500 text-white rounded-lg font-semibold hover:bg-red-600 transition duration-200">
                            Confirmar
                        </button>
                        <button id="cancel-modal-btn" class="px-5 py-2 bg-gray-300 text-gray-800 rounded-lg font-semibold hover:bg-gray-400 transition duration-200">
                            Cancelar
                        </button>
                    </div>
                </div>
            `;
            container.appendChild(modalElement);

            modalElement.querySelector('#confirm-modal-btn').onclick = () => {
                onConfirm();
                modalElement.remove();
            };
            modalElement.querySelector('#cancel-modal-btn').onclick = () => {
                onCancel();
                modalElement.remove();
            };
        }

        /**
         * Displays a modal to change password.
         * @param {function} onConfirm Callback function for confirmation.
         * @param {function} onCancel Callback function for cancellation.
         */
        function showChangePasswordModal(onConfirm, onCancel) {
            const container = document.getElementById('change-password-modal-container');
            if (!container) return;

            const modalElement = document.createElement('div');
            modalElement.className = `fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 animate-fade-in`;
            modalElement.innerHTML = `
                <div class="bg-white p-6 rounded-xl shadow-lg max-w-sm w-full text-center transform scale-95 animate-zoom-in">
                    <h3 class="text-xl font-bold text-gray-800 mb-4">Trocar Senha</h3>
                    <form id="change-password-form" class="space-y-4">
                        <div>
                            <label class="block text-gray-700 text-sm font-semibold mb-2" for="current-password-input">Senha Atual</label>
                            <div class="relative">
                                <input
                                    type="password"
                                    id="current-password-input"
                                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 pr-10"
                                    required
                                />
                                <button
                                    type="button"
                                    id="toggle-current-password-visibility"
                                    class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                                >
                                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>
                                </button>
                            </div>
                        </div>
                        <div>
                            <label class="block text-gray-700 text-sm font-semibold mb-2" for="new-password-input">Nova Senha</label>
                            <div class="relative">
                                <input
                                    type="password"
                                    id="new-password-input"
                                    class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 pr-10"
                                    required
                                />
                                <button
                                    type="button"
                                    id="toggle-new-password-visibility"
                                    class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600"
                                >
                                    <svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8c0 1.01-.183 1.98-.525 2.875m-5.353-5.353a3 3 0 11-4.242-4.242M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                                </button>
                            </div>
                        </div>
                        <div class="flex justify-center space-x-4">
                            <button
                                type="button"
                                id="cancel-change-password-btn"
                                class="px-5 py-2 bg-gray-300 text-gray-800 rounded-lg font-semibold hover:bg-gray-400 transition duration-200"
                            >
                                Cancelar
                            </button>
                            <button
                                type="submit"
                                id="confirm-change-password-btn"
                                class="px-5 py-2 bg-indigo-600 text-white rounded-lg font-semibold hover:bg-indigo-700 transition duration-200 disabled:opacity-50"
                            >
                                Confirmar
                            </button>
                        </div>
                    </form>
                </div>
            `;
            container.appendChild(modalElement);

            const currentPasswordInput = modalElement.querySelector('#current-password-input');
            const newPasswordInput = modalElement.querySelector('#new-password-input');
            const toggleCurrentPasswordVisibility = modalElement.querySelector('#toggle-current-password-visibility');
            const toggleNewPasswordVisibility = modalElement.querySelector('#toggle-new-password-visibility');
            const confirmBtn = modalElement.querySelector('#confirm-change-password-btn');

            toggleCurrentPasswordVisibility.onclick = () => {
                currentPasswordInput.type = currentPasswordInput.type === 'password' ? 'text' : 'password';
                toggleCurrentPasswordVisibility.innerHTML = currentPasswordInput.type === 'password' ? '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>' : '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8c0 1.01-.183 1.98-.525 2.875m-5.353-5.353a3 3 0 11-4.242-4.242M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>';
            };
            toggleNewPasswordVisibility.onclick = () => {
                newPasswordInput.type = newPasswordInput.type === 'password' ? 'text' : 'password';
                toggleNewPasswordVisibility.innerHTML = newPasswordInput.type === 'password' ? '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>' : '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8c0 1.01-.183 1.98-.525 2.875m-5.353-5.353a3 3 0 11-4.242-4.242M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>';
            };

            modalElement.querySelector('#change-password-form').onsubmit = (e) => {
                e.preventDefault();
                confirmBtn.disabled = true;
                onConfirm(currentPasswordInput.value, newPasswordInput.value);
                modalElement.remove();
            };
            modalElement.querySelector('#cancel-change-password-btn').onclick = () => {
                onCancel();
                modalElement.remove();
            };
        }

        /**
         * Displays a photo in a modal.
         * @param {string} imageUrl The URL of the image to display.
         */
        function showPhotoModal(imageUrl) {
            const container = document.getElementById('photo-modal-container');
            if (!container || !imageUrl) return;

            const modalElement = document.createElement('div');
            modalElement.className = `fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 animate-fade-in`;
            modalElement.innerHTML = `
                <div class="relative p-4 rounded-xl max-w-2xl w-full mx-auto">
                    <button id="close-photo-modal-btn" class="absolute top-4 right-4 text-white text-3xl font-bold bg-black bg-opacity-50 rounded-full w-10 h-10 flex items-center justify-center hover:bg-opacity-75 transition duration-200">
                        &times;
                    </button>
                    <img
                        src="${imageUrl}"
                        alt="Foto de Perfil Ampliada"
                        class="w-full h-auto rounded-xl shadow-lg max-h-[80vh] object-contain animate-zoom-in"
                    />
                </div>
            `;
            container.appendChild(modalElement);

            modalElement.querySelector('#close-photo-modal-btn').onclick = () => {
                modalElement.remove();
            };
        }

        /**
         * Switches the active screen.
         * @param {string} screenId The ID of the screen to activate.
         */
        function switchScreen(screenId) {
            document.querySelectorAll('.screen').forEach(screen => {
                screen.classList.remove('active');
                screen.style.display = 'none'; // Ensure it's hidden
            });
            document.getElementById(screenId).classList.add('active');
            document.getElementById(screenId).style.display = 'block'; // Ensure it's shown

            // Update active state for bottom navigation buttons
            if (appState.userId) {
                document.getElementById('bottom-nav').classList.remove('hidden');
                document.querySelectorAll('#bottom-nav button').forEach(button => {
                    button.classList.remove('text-indigo-600');
                    button.classList.add('text-gray-500');
                });
                const activeNavButton = document.getElementById(`nav-${screenId.replace('-screen', '')}-btn`);
                if (activeNavButton) {
                    activeNavButton.classList.remove('text-gray-500');
                    activeNavButton.classList.add('text-indigo-600');
                }
            } else {
                document.getElementById('bottom-nav').classList.add('hidden');
            }

            // Specific actions for screens
            if (screenId === 'home-screen') {
                loadEvents();
            } else if (screenId === 'profile-screen') {
                loadProfile();
            } else if (screenId === 'global-chat-screen') {
                loadGlobalChatMessages();
            }
        }

        /**
         * Populates a datalist with mock locations.
         * @param {string} datalistId The ID of the datalist element.
         */
        function populateLocationDatalist(datalistId) {
            const datalist = document.getElementById(datalistId);
            if (datalist) {
                datalist.innerHTML = MOCK_LOCATIONS.map(loc => `<option value="${loc}"></option>`).join('');
            }
        }

        // --- Firebase Initialization ---

        /**
         * Initializes Firebase and sets up auth state listener.
         */
        async function initializeFirebase() {
            try {
                app = initializeApp(firebaseConfig);
                auth = getAuth(app);
                db = getFirestore(app);
                projectId = firebaseConfig.projectId;
                appState.db = db;
                appState.auth = auth;
                appState.projectId = projectId;

                onAuthStateChanged(auth, async (user) => {
                    if (user) {
                        appState.userId = user.uid;
                        console.log("Usuário autenticado:", appState.userId);
                        switchScreen('home-screen'); // Go to home after login/register
                    } else {
                        appState.userId = null;
                        console.log("Usuário deslogado.");
                        switchScreen('auth-screen'); // Go to auth screen if not logged in
                    }
                });
            } catch (error) {
                console.error("Erro ao inicializar Firebase:", error);
                showMessage("Erro ao inicializar o aplicativo. Tente novamente.", "error");
            }
        }

        // --- Auth Screen Logic ---

        let isLoginMode = true; // true for login, false for register

        document.getElementById('toggle-auth-mode').addEventListener('click', () => {
            isLoginMode = !isLoginMode;
            document.getElementById('auth-title').textContent = isLoginMode ? 'Entrar' : 'Cadastrar';
            document.getElementById('auth-button').textContent = isLoginMode ? 'Entrar' : 'Cadastrar';
            document.getElementById('toggle-auth-mode').textContent = isLoginMode ? 'Não tem uma conta? Cadastre-se' : 'Já tem uma conta? Faça login';
        });

        document.getElementById('toggle-password-visibility').addEventListener('click', () => {
            const passwordInput = document.getElementById('auth-password');
            const icon = document.getElementById('toggle-password-visibility');
            if (passwordInput.type === 'password') {
                passwordInput.type = 'text';
                icon.innerHTML = '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.418 0-8-3.582-8-8s3.582-8 8-8 8 3.582 8 8c0 1.01-.183 1.98-.525 2.875m-5.353-5.353a3 3 0 11-4.242-4.242M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>';
            } else {
                passwordInput.type = 'password';
                icon.innerHTML = '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path></svg>';
            }
        });

        document.getElementById('auth-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const email = document.getElementById('auth-email').value;
            const password = document.getElementById('auth-password').value;
            const authButton = document.getElementById('auth-button');

            authButton.disabled = true;
            authButton.textContent = 'Carregando...';

            try {
                if (isLoginMode) {
                    await signInWithEmailAndPassword(appState.auth, email, password);
                    showMessage('Login realizado com sucesso!', 'success');
                } else {
                    await createUserWithEmailAndPassword(appState.auth, email, password);
                    showMessage('Cadastro realizado com sucesso!', 'success');
                }
            } catch (error) {
                console.error('Erro de autenticação:', error);
                showMessage(`Erro: ${error.message}`, 'error');
            } finally {
                authButton.disabled = false;
                authButton.textContent = isLoginMode ? 'Entrar' : 'Cadastrar';
            }
        });

        // --- Home Screen Logic (Event List) ---

        document.getElementById('create-event-btn').addEventListener('click', () => {
            switchScreen('create-event-screen');
            // Populate datalist for create event screen
            populateLocationDatalist('create-event-location-suggestions-datalist');
        });

        document.getElementById('search-term').addEventListener('input', loadEvents);
        document.getElementById('filter-location').addEventListener('input', loadEvents);

        /**
         * Loads and displays events from Firestore.
         */
        async function loadEvents() {
            if (!appState.db || !appState.projectId) return;

            const eventsListDiv = document.getElementById('events-list');
            const noEventsMessage = document.getElementById('no-events-message');
            eventsListDiv.innerHTML = ''; // Clear current events
            noEventsMessage.classList.add('hidden'); // Hide no events message

            const searchTerm = document.getElementById('search-term').value.toLowerCase();
            const filterLocation = document.getElementById('filter-location').value.toLowerCase();

            // Clear previous listeners
            appState.activeListeners.forEach(unsubscribe => unsubscribe());
            appState.activeListeners = [];

            const eventsCollectionRef = collection(appState.db, `artifacts/${appState.projectId}/public/data/events`);
            const q = query(eventsCollectionRef, orderBy('createdAt', 'desc'));

            const unsubscribe = onSnapshot(q, async (snapshot) => {
                const eventsData = [];
                for (const docSnapshot of snapshot.docs) {
                    const event = { id: docSnapshot.id, ...docSnapshot.data() };
                    eventsData.push(event);
                }

                const filteredEvents = eventsData.filter(event => {
                    const matchesSearch = event.name.toLowerCase().includes(searchTerm) ||
                                          event.description.toLowerCase().includes(searchTerm);
                    const matchesLocation = filterLocation === '' ||
                                            event.location.toLowerCase().includes(filterLocation);
                    return matchesSearch && matchesLocation;
                });

                if (filteredEvents.length === 0) {
                    noEventsMessage.classList.remove('hidden');
                } else {
                    noEventsMessage.classList.add('hidden');
                }

                eventsListDiv.innerHTML = ''; // Clear before re-rendering
                filteredEvents.forEach(event => {
                    const eventElement = document.createElement('div');
                    eventElement.className = "bg-white p-5 rounded-xl shadow-md border border-gray-200 transform transition-all duration-300 ease-in-out hover:scale-[1.02]";
                    
                    const interestedUsersCount = event.interestedUsers ? event.interestedUsers.length : 0;
                    const isInterested = event.interestedUsers && event.interestedUsers.includes(appState.userId);
                    const interestBtnClass = isInterested
                        ? 'bg-red-500 text-white hover:bg-red-600'
                        : 'bg-indigo-600 text-white hover:bg-indigo-700';
                    const interestBtnText = isInterested ? 'Não Quero Mais Ir' : 'Quero Ir!';

                    eventElement.innerHTML = `
                        <div class="flex items-center mb-3">
                            <img
                                src="${event.creatorProfileImageUrl || 'https://placehold.co/40x40/cccccc/333333?text=PF'}"
                                alt="Foto do Criador"
                                class="w-10 h-10 rounded-full object-cover mr-3 border-2 border-purple-400"
                                onerror="this.onerror=null;this.src='https://placehold.co/40x40/cccccc/333333?text=PF';"
                            />
                            <p class="font-semibold text-gray-700">${event.creatorName || 'Usuário Desconhecido'}</p>
                        </div>
                        <h3 class="text-xl font-semibold text-gray-800 mb-2">${event.name}</h3>
                        <p class="text-gray-600 text-sm mb-1">
                            <span class="font-medium">Data:</span> ${event.date} às ${event.time}
                        </p>
                        <p class="text-gray-600 text-sm mb-1">
                            <span class="font-medium">Local:</span> ${event.location}
                        </p>
                        <p class="text-gray-700 mb-3 text-sm">${event.description}</p>
                        <p class="text-gray-500 text-xs mb-3">
                            Interessados: ${interestedUsersCount}
                        </p>
                        <div class="flex space-x-2">
                            <button data-event-id="${event.id}" data-interested-users='${JSON.stringify(event.interestedUsers || [])}'
                                class="interest-btn flex-1 py-2 rounded-lg font-semibold text-sm transition duration-300 ${interestBtnClass} shadow-md">
                                ${interestBtnText}
                            </button>
                            <button data-event-id="${event.id}" class="view-detail-btn flex-1 bg-gray-200 text-gray-800 py-2 rounded-lg font-semibold text-sm hover:bg-gray-300 transition duration-300 shadow-md">
                                Ver Detalhes
                            </button>
                        </div>
                        ${event.creatorId === appState.userId ? `
                            <div class="flex justify-end space-x-2 mt-3">
                                <button data-event-id="${event.id}" class="edit-event-btn px-3 py-1 bg-blue-500 text-white rounded-lg text-xs font-semibold hover:bg-blue-600 transition duration-200">
                                    Editar
                                </button>
                                <button data-event-id="${event.id}" class="delete-event-btn px-3 py-1 bg-red-500 text-white rounded-lg text-xs font-semibold hover:bg-red-600 transition duration-200">
                                    Apagar
                                </button>
                            </div>
                        ` : ''}
                    `;
                    eventsListDiv.appendChild(eventElement);
                });

                // Attach event listeners to newly created buttons
                eventsListDiv.querySelectorAll('.interest-btn').forEach(button => {
                    button.addEventListener('click', async (e) => {
                        const eventId = e.target.dataset.eventId;
                        const interestedUsers = JSON.parse(e.target.dataset.interestedUsers);
                        await handleInterest(eventId, interestedUsers);
                    });
                });

                eventsListDiv.querySelectorAll('.view-detail-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const eventId = e.target.dataset.eventId;
                        const event = filteredEvents.find(ev => ev.id === eventId);
                        if (event) {
                            appState.selectedEvent = event;
                            switchScreen('event-detail-screen');
                            renderEventDetail();
                        }
                    });
                });

                eventsListDiv.querySelectorAll('.edit-event-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const eventId = e.target.dataset.eventId;
                        const event = filteredEvents.find(ev => ev.id === eventId);
                        if (event) {
                            appState.selectedEvent = event;
                            switchScreen('edit-event-screen');
                            renderEditEventScreen(event);
                            populateLocationDatalist('edit-event-location-suggestions-datalist');
                        }
                    });
                });

                eventsListDiv.querySelectorAll('.delete-event-btn').forEach(button => {
                    button.addEventListener('click', (e) => {
                        const eventId = e.target.dataset.eventId;
                        const event = filteredEvents.find(ev => ev.id === eventId);
                        if (event) {
                            showConfirmationModal(`Tem certeza que deseja apagar o evento "${event.name}"?`,
                                () => deleteEvent(event.id),
                                () => showMessage('Exclusão cancelada.', 'info')
                            );
                        }
                    });
                });

            }, (error) => {
                console.error("Erro ao buscar eventos:", error);
                showMessage("Erro ao carregar eventos.", "error");
            });

            appState.activeListeners.push(unsubscribe); // Store unsubscribe function
        }

        /**
         * Handles interest in an event (add/remove user from interestedUsers array).
         * @param {string} eventId The ID of the event.
         * @param {Array<string>} interestedUsers The current array of interested user UIDs.
         */
        async function handleInterest(eventId, interestedUsers) {
            if (!appState.db || !appState.userId || !appState.projectId) {
                showMessage('Erro: Usuário não autenticado.', 'error');
                return;
            }

            const eventRef = doc(appState.db, `artifacts/${appState.projectId}/public/data/events`, eventId);
            let updatedInterestedUsers;

            if (interestedUsers && interestedUsers.includes(appState.userId)) {
                updatedInterestedUsers = interestedUsers.filter(id => id !== appState.userId);
            } else {
                updatedInterestedUsers = interestedUsers ? [...interestedUsers, appState.userId] : [appState.userId];
            }

            try {
                await updateDoc(eventRef, { interestedUsers: updatedInterestedUsers });
                showMessage(
                    interestedUsers && interestedUsers.includes(appState.userId) ? 'Interesse removido!' : 'Interesse adicionado!',
                    'success'
                );
            } catch (error) {
                console.error('Erro ao atualizar interesse:', error);
                showMessage('Erro ao atualizar interesse. Verifique as regras de segurança do Firestore.', 'error');
            }
        }

        /**
         * Deletes an event.
         * @param {string} eventId The ID of the event to delete.
         */
        async function deleteEvent(eventId) {
            if (!appState.db || !appState.userId || !appState.projectId) {
                showMessage('Erro: Usuário não autenticado.', 'error');
                return;
            }
            try {
                await deleteDoc(doc(appState.db, `artifacts/${appState.projectId}/public/data/events`, eventId));
                showMessage('Evento apagado com sucesso!', 'success');
            } catch (error) {
                console.error('Erro ao apagar evento:', error);
                showMessage('Erro ao apagar evento.', 'error');
            }
        }

        // --- Create Event Screen Logic ---

        document.getElementById('create-event-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const eventName = document.getElementById('event-name').value;
            const eventDate = document.getElementById('event-date').value;
            const eventTime = document.getElementById('event-time').value;
            const eventLocation = document.getElementById('event-location').value;
            const eventDescription = document.getElementById('event-description').value;
            const whatsappLink = document.getElementById('event-whatsapp-link').value;
            const otherContacts = document.getElementById('event-other-contacts').value;
            const transportation = document.getElementById('event-transportation').value;
            const splitTransportation = document.getElementById('event-split-transportation').checked;

            const submitBtn = document.getElementById('create-event-submit-btn');
            submitBtn.disabled = true;
            submitBtn.textContent = 'Criando...';

            if (!appState.db || !appState.userId || !appState.projectId) {
                showMessage('Erro: Usuário não autenticado ou projeto não definido.', 'error');
                submitBtn.disabled = false;
                submitBtn.textContent = 'Criar Evento';
                return;
            }

            let creatorName = 'Usuário Desconhecido';
            let creatorProfileImageUrl = '';
            try {
                const profileDocRef = doc(appState.db, `artifacts/${appState.projectId}/users/${appState.userId}/profiles`, 'myProfile');
                const profileDocSnap = await getDoc(profileDocRef);
                if (profileDocSnap.exists()) {
                    const profileData = profileDocSnap.data();
                    creatorName = profileData.name || creatorName;
                    creatorProfileImageUrl = profileData.profileImageUrl || '';
                }
            } catch (profileError) {
                console.warn('Não foi possível buscar o perfil do criador para o evento:', profileError);
            }

            try {
                await addDoc(collection(appState.db, `artifacts/${appState.projectId}/public/data/events`), {
                    name: eventName,
                    date: eventDate,
                    time: eventTime,
                    location: eventLocation,
                    description: eventDescription,
                    creatorId: appState.userId,
                    creatorName: creatorName,
                    creatorProfileImageUrl: creatorProfileImageUrl,
                    whatsappLink: whatsappLink,
                    otherContacts: otherContacts,
                    transportation: transportation,
                    splitTransportation: splitTransportation,
                    createdAt: serverTimestamp(),
                    interestedUsers: [],
                });
                showMessage('Evento criado com sucesso!', 'success');
                // Clear form
                document.getElementById('event-name').value = '';
                document.getElementById('event-date').value = '';
                document.getElementById('event-time').value = '';
                document.getElementById('event-location').value = '';
                document.getElementById('event-description').value = '';
                document.getElementById('event-whatsapp-link').value = '';
                document.getElementById('event-other-contacts').value = '';
                document.getElementById('event-transportation').value = '';
                document.getElementById('event-split-transportation').checked = false;
                switchScreen('home-screen');
            } catch (error) {
                console.error('Erro ao criar evento:', error);
                showMessage('Erro ao criar evento.', 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Criar Evento';
            }
        });

        document.getElementById('create-event-back-btn').addEventListener('click', () => {
            switchScreen('home-screen');
        });

        // --- Edit Event Screen Logic ---

        /**
         * Renders the edit event screen with selected event data.
         * @param {object} event The event object to edit.
         */
        function renderEditEventScreen(event) {
            document.getElementById('edit-event-name').value = event.name || '';
            document.getElementById('edit-event-date').value = event.date || '';
            document.getElementById('edit-event-time').value = event.time || '';
            document.getElementById('edit-event-location').value = event.location || '';
            document.getElementById('edit-event-description').value = event.description || '';
            document.getElementById('edit-event-whatsapp-link').value = event.whatsappLink || '';
            document.getElementById('edit-event-other-contacts').value = event.otherContacts || '';
            document.getElementById('edit-event-transportation').value = event.transportation || '';
            document.getElementById('edit-event-split-transportation').checked = event.splitTransportation || false;
        }

        document.getElementById('edit-event-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const eventName = document.getElementById('edit-event-name').value;
            const eventDate = document.getElementById('edit-event-date').value;
            const eventTime = document.getElementById('edit-event-time').value;
            const eventLocation = document.getElementById('edit-event-location').value;
            const eventDescription = document.getElementById('edit-event-description').value;
            const whatsappLink = document.getElementById('edit-event-whatsapp-link').value;
            const otherContacts = document.getElementById('edit-event-other-contacts').value;
            const transportation = document.getElementById('edit-event-transportation').value;
            const splitTransportation = document.getElementById('edit-event-split-transportation').checked;

            const submitBtn = document.getElementById('edit-event-submit-btn');
            submitBtn.disabled = true;
            submitBtn.textContent = 'Atualizando...';

            if (!appState.db || !appState.userId || !appState.projectId || !appState.selectedEvent) {
                showMessage('Erro: Usuário não autenticado ou evento não selecionado.', 'error');
                submitBtn.disabled = false;
                submitBtn.textContent = 'Atualizar Evento';
                return;
            }

            try {
                const eventRef = doc(appState.db, `artifacts/${appState.projectId}/public/data/events`, appState.selectedEvent.id);
                await updateDoc(eventRef, {
                    name: eventName,
                    date: eventDate,
                    time: eventTime,
                    location: eventLocation,
                    description: eventDescription,
                    whatsappLink: whatsappLink,
                    otherContacts: otherContacts,
                    transportation: transportation,
                    splitTransportation: splitTransportation,
                    updatedAt: serverTimestamp()
                });
                showMessage('Evento atualizado com sucesso!', 'success');
                switchScreen('home-screen');
            } catch (error) {
                console.error('Erro ao atualizar evento:', error);
                showMessage('Erro ao atualizar evento.', 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Atualizar Evento';
            }
        });

        document.getElementById('edit-event-back-btn').addEventListener('click', () => {
            switchScreen('home-screen');
        });

        // --- Event Detail Screen Logic ---

        /**
         * Renders the details of the selected event and its comments.
         */
        async function renderEventDetail() {
            if (!appState.selectedEvent) {
                showMessage('Nenhum evento selecionado para detalhes.', 'error');
                switchScreen('home-screen');
                return;
            }

            const event = appState.selectedEvent;
            document.getElementById('event-detail-name').textContent = event.name;
            document.getElementById('event-detail-date').textContent = event.date;
            document.getElementById('event-detail-time').textContent = event.time;
            document.getElementById('event-detail-location').textContent = event.location;
            document.getElementById('event-detail-description').textContent = event.description;

            // Optional fields
            const whatsappLinkDisplay = document.getElementById('event-detail-whatsapp-link-display');
            const whatsappLinkAnchor = document.getElementById('event-detail-whatsapp-link');
            if (event.whatsappLink) {
                whatsappLinkAnchor.href = event.whatsappLink;
                whatsappLinkDisplay.classList.remove('hidden');
            } else {
                whatsappLinkDisplay.classList.add('hidden');
            }

            const otherContactsDisplay = document.getElementById('event-detail-other-contacts-display');
            document.getElementById('event-detail-other-contacts').textContent = event.otherContacts || '';
            if (event.otherContacts) {
                otherContactsDisplay.classList.remove('hidden');
            } else {
                otherContactsDisplay.classList.add('hidden');
            }

            const transportationDisplay = document.getElementById('event-detail-transportation-display');
            document.getElementById('event-detail-transportation').textContent = `${event.transportation || ''} ${event.splitTransportation ? '(Dividir)' : ''}`.trim();
            if (event.transportation) {
                transportationDisplay.classList.remove('hidden');
            } else {
                transportationDisplay.classList.add('hidden');
            }

            // Creator Info
            document.getElementById('event-detail-creator-name').textContent = event.creatorName || 'Usuário Desconhecido';
            const creatorImage = document.getElementById('event-detail-creator-image');
            creatorImage.src = event.creatorProfileImageUrl || 'https://placehold.co/40x40/cccccc/333333?text=PF';
            creatorImage.onerror = () => { creatorImage.src = 'https://placehold.co/40x40/cccccc/333333?text=PF'; };
            creatorImage.onclick = () => showPhotoModal(event.creatorProfileImageUrl);

            loadEventComments(event.id);
        }

        document.getElementById('event-detail-back-btn').addEventListener('click', () => {
            switchScreen('home-screen');
        });

        document.getElementById('post-comment-btn').addEventListener('click', postComment);
        document.getElementById('comment-text-input').addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) { // Allow Shift+Enter for new line
                e.preventDefault();
                postComment();
            }
        });

        /**
         * Loads and displays comments for a specific event.
         * @param {string} eventId The ID of the event.
         */
        async function loadEventComments(eventId) {
            if (!appState.db || !appState.projectId || !eventId) return;

            const commentsListDiv = document.getElementById('comments-list');
            const noCommentsMessage = document.getElementById('no-comments-message');
            const loadingCommentsMessage = document.getElementById('loading-comments-message');

            commentsListDiv.innerHTML = '';
            noCommentsMessage.classList.add('hidden');
            loadingCommentsMessage.classList.remove('hidden');

            // Clear previous listeners for comments
            appState.activeListeners.forEach(unsubscribe => unsubscribe());
            appState.activeListeners = [];

            const commentsCollectionRef = collection(appState.db, `artifacts/${appState.projectId}/public/data/events/${eventId}/comments`);
            const q = query(commentsCollectionRef, orderBy('createdAt'));

            const unsubscribe = onSnapshot(q, async (snapshot) => {
                const fetchedComments = [];
                for (const docSnapshot of snapshot.docs) {
                    const comment = { id: docSnapshot.id, ...docSnapshot.data() };
                    let creatorName = 'Usuário Desconhecido';
                    let creatorProfileImageUrl = '';
                    if (comment.creatorId) {
                        try {
                            const profileDocRef = doc(appState.db, `artifacts/${appState.projectId}/users/${comment.creatorId}/profiles`, 'myProfile');
                            const profileDocSnap = await getDoc(profileDocRef);
                            if (profileDocSnap.exists()) {
                                const profileData = profileDocSnap.data();
                                creatorName = profileData.name || creatorName;
                                creatorProfileImageUrl = profileData.profileImageUrl || '';
                            }
                        } catch (profileError) {
                            console.warn('Não foi possível buscar o perfil do criador do comentário:', profileError);
                        }
                    }
                    fetchedComments.push({
                        ...comment,
                        creatorName,
                        creatorProfileImageUrl,
                        createdAt: comment.createdAt?.toDate().toLocaleString('pt-BR') || 'agora'
                    });
                }

                loadingCommentsMessage.classList.add('hidden');
                if (fetchedComments.length === 0) {
                    noCommentsMessage.classList.remove('hidden');
                } else {
                    noCommentsMessage.classList.add('hidden');
                }

                commentsListDiv.innerHTML = ''; // Clear before re-rendering
                fetchedComments.forEach(comment => {
                    const commentElement = document.createElement('div');
                    commentElement.className = "bg-white p-3 rounded-lg shadow-sm border border-gray-100";
                    commentElement.innerHTML = `
                        <div class="flex items-center mb-2">
                            <img
                                src="${comment.creatorProfileImageUrl || 'https://placehold.co/32x32/cccccc/333333?text=PF'}"
                                alt="Foto do Comentarista"
                                class="w-8 h-8 rounded-full object-cover mr-2 border border-gray-300 cursor-pointer"
                                onerror="this.onerror=null;this.src='https://placehold.co/32x32/cccccc/333333?text=PF';"
                            />
                            <p class="font-semibold text-gray-700">${comment.creatorName || 'Usuário Desconhecido'}</p>
                            <span class="text-xs text-gray-500 ml-auto">${comment.createdAt}</span>
                        </div>
                        <p class="text-gray-700 text-sm">${comment.text}</p>
                        ${comment.creatorId === appState.userId ? `
                            <div class="flex justify-end space-x-2 mt-2">
                                <button data-comment-id="${comment.id}" data-comment-text="${comment.text}" class="edit-comment-btn px-2 py-1 bg-blue-500 text-white rounded-lg text-xs hover:bg-blue-600 transition duration-200">
                                    Editar
                                </button>
                                <button data-comment-id="${comment.id}" class="delete-comment-btn px-2 py-1 bg-red-500 text-white rounded-lg text-xs hover:bg-red-600 transition duration-200">
                                    Apagar
                                </button>
                            </div>
                        ` : ''}
                    `;
                    commentsListDiv.appendChild(commentElement);

                    // Attach event listeners for photo modal
                    commentElement.querySelector('img').onclick = () => showPhotoModal(comment.creatorProfileImageUrl);

                    // Attach event listeners for edit/delete buttons
                    if (comment.creatorId === appState.userId) {
                        commentElement.querySelector('.edit-comment-btn').addEventListener('click', (e) => {
                            const commentId = e.target.dataset.commentId;
                            const commentText = e.target.dataset.commentText;
                            editComment(commentId, commentText, commentElement);
                        });
                        commentElement.querySelector('.delete-comment-btn').addEventListener('click', (e) => {
                            const commentId = e.target.dataset.commentId;
                            showConfirmationModal('Tem certeza que deseja apagar este comentário?',
                                () => deleteComment(eventId, commentId),
                                () => showMessage('Exclusão de comentário cancelada.', 'info')
                            );
                        });
                    }
                });
                commentsListDiv.scrollTop = commentsListDiv.scrollHeight; // Scroll to bottom
            }, (error) => {
                console.error("Erro ao buscar comentários:", error);
                showMessage("Erro ao carregar comentários.", "error");
                loadingCommentsMessage.classList.add('hidden');
                noCommentsMessage.classList.remove('hidden');
            });

            appState.activeListeners.push(unsubscribe); // Store unsubscribe function
        }

        /**
         * Posts a new comment to the selected event.
         */
        async function postComment() {
            const commentTextInput = document.getElementById('comment-text-input');
            const commentText = commentTextInput.value.trim();
            if (commentText === '' || !appState.db || !appState.userId || !appState.projectId || !appState.selectedEvent?.id) {
                return;
            }

            const postBtn = document.getElementById('post-comment-btn');
            postBtn.disabled = true;
            postBtn.textContent = 'Postando...';

            try {
                await addDoc(collection(appState.db, `artifacts/${appState.projectId}/public/data/events/${appState.selectedEvent.id}/comments`), {
                    text: commentText,
                    creatorId: appState.userId,
                    createdAt: serverTimestamp(),
                });
                commentTextInput.value = '';
                showMessage('Comentário postado!', 'success');
            } catch (error) {
                console.error('Erro ao postar comentário:', error);
                showMessage('Erro ao postar comentário.', 'error');
            } finally {
                postBtn.disabled = false;
                postBtn.textContent = 'Postar';
            }
        }

        /**
         * Enables editing for a comment.
         * @param {string} commentId The ID of the comment to edit.
         * @param {string} currentText The current text of the comment.
         * @param {HTMLElement} commentElement The DOM element of the comment.
         */
        function editComment(commentId, currentText, commentElement) {
            const textParagraph = commentElement.querySelector('.text-sm');
            const actionsDiv = commentElement.querySelector('.flex.justify-end');

            const originalText = textParagraph.textContent;

            // Create textarea for editing
            const textarea = document.createElement('textarea');
            textarea.className = "w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 resize-none";
            textarea.value = currentText;
            textarea.rows = 2;

            // Create save/cancel buttons
            const saveBtn = document.createElement('button');
            saveBtn.className = "px-3 py-1 bg-green-500 text-white rounded-lg text-xs hover:bg-green-600 transition duration-200";
            saveBtn.textContent = 'Salvar';

            const cancelBtn = document.createElement('button');
            cancelBtn.className = "px-3 py-1 bg-gray-300 text-gray-800 rounded-lg text-xs hover:bg-gray-400 transition duration-200 ml-2";
            cancelBtn.textContent = 'Cancelar';

            // Replace text with textarea
            textParagraph.replaceWith(textarea);
            actionsDiv.innerHTML = ''; // Clear old buttons
            actionsDiv.appendChild(saveBtn);
            actionsDiv.appendChild(cancelBtn);

            saveBtn.onclick = async () => {
                const newText = textarea.value.trim();
                if (newText === '') {
                    showMessage('Comentário não pode ser vazio.', 'error');
                    return;
                }
                saveBtn.disabled = true;
                saveBtn.textContent = 'Salvando...';
                try {
                    const commentRef = doc(appState.db, `artifacts/${appState.projectId}/public/data/events/${appState.selectedEvent.id}/comments`, commentId);
                    await updateDoc(commentRef, {
                        text: newText,
                        updatedAt: serverTimestamp(),
                    });
                    showMessage('Comentário atualizado!', 'success');
                } catch (error) {
                    console.error('Erro ao atualizar comentário:', error);
                    showMessage('Erro ao atualizar comentário.', 'error');
                } finally {
                    // Re-render comments to show updated state and original buttons
                    loadEventComments(appState.selectedEvent.id);
                }
            };

            cancelBtn.onclick = () => {
                // Restore original text and buttons
                textarea.replaceWith(textParagraph);
                actionsDiv.innerHTML = `
                    <button data-comment-id="${commentId}" data-comment-text="${originalText}" class="edit-comment-btn px-2 py-1 bg-blue-500 text-white rounded-lg text-xs hover:bg-blue-600 transition duration-200">
                        Editar
                    </button>
                    <button data-comment-id="${commentId}" class="delete-comment-btn px-2 py-1 bg-red-500 text-white rounded-lg text-xs hover:bg-red-600 transition duration-200">
                        Apagar
                    </button>
                `;
                // Re-attach event listeners for restored buttons
                commentElement.querySelector('.edit-comment-btn').addEventListener('click', (e) => {
                    const commentId = e.target.dataset.commentId;
                    const commentText = e.target.dataset.commentText;
                    editComment(commentId, commentText, commentElement);
                });
                commentElement.querySelector('.delete-comment-btn').addEventListener('click', (e) => {
                    const commentId = e.target.dataset.commentId;
                    showConfirmationModal('Tem certeza que deseja apagar este comentário?',
                        () => deleteComment(appState.selectedEvent.id, commentId),
                        () => showMessage('Exclusão de comentário cancelada.', 'info')
                    );
                });
            };
        }

        /**
         * Deletes a comment from an event.
         * @param {string} eventId The ID of the event.
         * @param {string} commentId The ID of the comment to delete.
         */
        async function deleteComment(eventId, commentId) {
            if (!appState.db || !appState.projectId || !eventId || !commentId) {
                showMessage('Erro: Não foi possível apagar o comentário.', 'error');
                return;
            }
            try {
                await deleteDoc(doc(appState.db, `artifacts/${appState.projectId}/public/data/events/${eventId}/comments`, commentId));
                showMessage('Comentário apagado com sucesso!', 'success');
            } catch (error) {
                console.error('Erro ao apagar comentário:', error);
                showMessage('Erro ao apagar comentário.', 'error');
            }
        }

        // --- Profile Screen Logic ---

        document.getElementById('profile-image-input').addEventListener('change', (e) => {
            const file = e.target.files[0];
            if (file) {
                appState.profileImageFile = file;
                const reader = new FileReader();
                reader.onload = (event) => {
                    document.getElementById('profile-image-preview').src = event.target.result;
                };
                reader.readAsDataURL(file);
            } else {
                appState.profileImageFile = null;
                document.getElementById('profile-image-preview').src = 'https://placehold.co/128x128/cccccc/333333?text=Sem+Foto';
            }
        });

        document.getElementById('profile-form').addEventListener('submit', async (e) => {
            e.preventDefault();
            const name = document.getElementById('profile-name').value;
            const age = document.getElementById('profile-age').value;
            const interests = document.getElementById('profile-interests').value;
            const bio = document.getElementById('profile-bio').value;
            const location = document.getElementById('profile-location').value;

            const saveBtn = document.getElementById('save-profile-btn');
            saveBtn.disabled = true;
            saveBtn.textContent = 'Salvando...';

            if (!appState.db || !appState.userId || !appState.projectId) {
                showMessage('Erro: Usuário não autenticado ou projeto não definido.', 'error');
                saveBtn.disabled = false;
                saveBtn.textContent = 'Salvar Perfil';
                return;
            }

            if (Number(age) < 18) {
                showMessage('Você deve ter 18 anos ou mais para usar o aplicativo.', 'error');
                saveBtn.disabled = false;
                saveBtn.textContent = 'Salvar Perfil';
                return;
            }

            let imageUrlToSave = document.getElementById('profile-image-preview').src; // Current displayed image
            if (appState.profileImageFile) {
                const uploadedUrl = await uploadImageToImgBB(appState.profileImageFile);
                if (uploadedUrl) {
                    imageUrlToSave = uploadedUrl;
                } else {
                    saveBtn.disabled = false;
                    saveBtn.textContent = 'Salvar Perfil';
                    return;
                }
            }

            try {
                const docRef = doc(appState.db, `artifacts/${appState.projectId}/users/${appState.userId}/profiles`, 'myProfile');
                await setDoc(docRef, {
                    name,
                    age: Number(age),
                    interests: interests.split(',').map(i => i.trim()).filter(i => i),
                    bio,
                    location,
                    profileImageUrl: imageUrlToSave,
                    updatedAt: serverTimestamp()
                }, { merge: true });
                showMessage('Perfil salvo com sucesso!', 'success');
                appState.profileImageFile = null; // Clear file after upload
            } catch (error) {
                console.error('Erro ao salvar perfil:', error);
                showMessage('Erro ao salvar perfil.', 'error');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Salvar Perfil';
            }
        });

        /**
         * Uploads an image to ImgBB and returns the URL.
         * @param {File} imageFile The image file to upload.
         * @returns {Promise<string|null>} The URL of the uploaded image, or null if error.
         */
        async function uploadImageToImgBB(imageFile) {
            const saveBtn = document.getElementById('save-profile-btn');
            saveBtn.disabled = true;
            saveBtn.textContent = 'Enviando Imagem...';

            try {
                const formData = new FormData();
                formData.append('image', imageFile);

                const response = await fetch(`https://api.imgbb.com/1/upload?key=${IMGBB_API_KEY}`, {
                    method: 'POST',
                    body: formData,
                });

                const result = await response.json();

                if (result.success) {
                    showMessage('Imagem enviada com sucesso!', 'success');
                    return result.data.url;
                } else {
                    throw new Error(result.error.message || 'Falha ao enviar imagem para o ImgBB.');
                }
            } catch (error) {
                console.error('Erro ao enviar imagem:', error);
                showMessage(`Erro ao enviar imagem: ${error.message}`, 'error');
                return null;
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Salvar Perfil';
            }
        }

        /**
         * Loads and displays the current user's profile.
         */
        async function loadProfile() {
            if (!appState.db || !appState.userId || !appState.projectId) return;

            // Populate datalist for profile screen
            populateLocationDatalist('profile-location-suggestions-datalist');

            const profileNameInput = document.getElementById('profile-name');
            const profileAgeInput = document.getElementById('profile-age');
            const profileInterestsInput = document.getElementById('profile-interests');
            const profileBioInput = document.getElementById('profile-bio');
            const profileLocationInput = document.getElementById('profile-location');
            const profileImagePreview = document.getElementById('profile-image-preview');
            const profileDisplayName = document.getElementById('profile-display-name');
            const profileDisplayUid = document.getElementById('profile-display-uid');
            const profileDisplayLocation = document.getElementById('profile-display-location');

            profileNameInput.value = '';
            profileAgeInput.value = '';
            profileInterestsInput.value = '';
            profileBioInput.value = '';
            profileLocationInput.value = '';
            profileImagePreview.src = 'https://placehold.co/128x128/cccccc/333333?text=Sem+Foto';
            profileDisplayName.textContent = 'Nome não definido';
            profileDisplayUid.textContent = `UID: ${appState.userId}`;
            profileDisplayLocation.textContent = 'Localização não definida';

            try {
                const docRef = doc(appState.db, `artifacts/${appState.projectId}/users/${appState.userId}/profiles`, 'myProfile');
                const docSnap = await getDoc(docRef);
                if (docSnap.exists()) {
                    const data = docSnap.data();
                    profileNameInput.value = data.name || '';
                    profileAgeInput.value = data.age || '';
                    profileInterestsInput.value = data.interests ? data.interests.join(', ') : '';
                    profileBioInput.value = data.bio || '';
                    profileLocationInput.value = data.location || '';
                    profileImagePreview.src = data.profileImageUrl || 'https://placehold.co/128x128/cccccc/333333?text=Sem+Foto';
                    profileImagePreview.onerror = () => { profileImagePreview.src = 'https://placehold.co/128x128/cccccc/333333?text=Sem+Foto'; };

                    profileDisplayName.textContent = data.name || 'Nome não definido';
                    profileDisplayLocation.textContent = data.location || 'Localização não definida';
                }
            } catch (error) {
                console.error('Erro ao buscar perfil:', error);
                showMessage('Erro ao carregar perfil.', 'error');
            }
        }

        document.getElementById('change-password-btn').addEventListener('click', () => {
            showChangePasswordModal(
                async (currentPassword, newPassword) => {
                    const user = appState.auth.currentUser;
                    if (!user || !user.email) {
                        showMessage('Erro: Usuário não logado ou sem email.', 'error');
                        return;
                    }
                    try {
                        const credential = EmailAuthProvider.credential(user.email, currentPassword);
                        await reauthenticateWithCredential(user, credential);
                        await updatePassword(user, newPassword);
                        showMessage('Senha alterada com sucesso!', 'success');
                    } catch (error) {
                        console.error('Erro ao trocar senha:', error);
                        showMessage(`Erro ao trocar senha: ${error.message}`, 'error');
                    }
                },
                () => showMessage('Troca de senha cancelada.', 'info')
            );
        });

        document.getElementById('delete-profile-btn').addEventListener('click', () => {
            showConfirmationModal(
                "Tem certeza que deseja excluir seu perfil permanentemente? Todos os seus dados (perfil, eventos criados, comentários, mensagens do chat global) serão apagados e esta ação é irreversível.",
                async () => {
                    if (!appState.db || !appState.userId || !appState.projectId) {
                        showMessage('Erro: Usuário não autenticado ou projeto não definido.', 'error');
                        return;
                    }
                    try {
                        const user = appState.auth.currentUser;
                        if (!user) {
                            showMessage('Erro: Nenhum usuário logado para excluir.', 'error');
                            return;
                        }

                        // 1. Excluir o documento do perfil do Firestore
                        const profileDocRef = doc(appState.db, `artifacts/${appState.projectId}/users/${appState.userId}/profiles`, 'myProfile');
                        await deleteDoc(profileDocRef);

                        // 2. Excluir eventos criados pelo usuário
                        const eventsQuery = query(collection(appState.db, `artifacts/${appState.projectId}/public/data/events`), where('creatorId', '==', appState.userId));
                        const eventsSnapshot = await getDocs(eventsQuery);
                        for (const docSnapshot of eventsSnapshot.docs) {
                            await deleteDoc(doc(appState.db, `artifacts/${appState.projectId}/public/data/events`, docSnapshot.id));
                        }

                        // 3. Excluir comentários feitos pelo usuário em eventos
                        const allEventsQuery = query(collection(appState.db, `artifacts/${appState.projectId}/public/data/events`));
                        const allEventsSnapshot = await getDocs(allEventsQuery);
                        for (const eventDoc of allEventsSnapshot.docs) {
                            const commentsQuery = query(collection(appState.db, `artifacts/${appState.projectId}/public/data/events/${eventDoc.id}/comments`), where('creatorId', '==', appState.userId));
                            const commentsSnapshot = await getDocs(commentsQuery);
                            for (const commentDoc of commentsSnapshot.docs) {
                                await deleteDoc(doc(appState.db, `artifacts/${appState.projectId}/public/data/events/${eventDoc.id}/comments`, commentDoc.id));
                            }
                        }

                        // 4. Excluir mensagens do chat global enviadas pelo usuário
                        const globalChatQuery = query(collection(appState.db, `artifacts/${appState.projectId}/public/data/global_chat_messages`), where('senderId', '==', appState.userId));
                        const globalChatSnapshot = await getDocs(globalChatQuery);
                        for (const msgDoc of globalChatSnapshot.docs) {
                            await deleteDoc(doc(appState.db, `artifacts/${appState.projectId}/public/data/global_chat_messages`, msgDoc.id));
                        }

                        // 5. Excluir o usuário do Firebase Authentication
                        await deleteUser(user);

                        showMessage('Perfil e todos os dados associados excluídos permanentemente.', 'success');
                        // Auth state listener will handle screen switch to auth-screen
                    } catch (error) {
                        console.error('Erro ao excluir perfil:', error);
                        showMessage(`Erro ao excluir perfil: ${error.message}`, 'error');
                    }
                },
                () => showMessage('Exclusão de perfil cancelada.', 'info')
            );
        });

        // --- Global Chat Screen Logic ---

        const messagesListDiv = document.getElementById('messages-list');
        const chatMessageInput = document.getElementById('chat-message-input');
        const sendMessageBtn = document.getElementById('send-message-btn');
        const noMessagesMessage = document.getElementById('no-messages-message');
        const loadingMessagesMessage = document.getElementById('loading-messages-message');

        /**
         * Loads and displays global chat messages from Firestore.
         */
        async function loadGlobalChatMessages() {
            if (!appState.db || !appState.projectId) return;

            messagesListDiv.innerHTML = '';
            noMessagesMessage.classList.add('hidden');
            loadingMessagesMessage.classList.remove('hidden');

            // Clear previous listeners for global chat
            appState.activeListeners.forEach(unsubscribe => unsubscribe());
            appState.activeListeners = [];

            const globalChatCollectionRef = collection(appState.db, `artifacts/${appState.projectId}/public/data/global_chat_messages`);
            const q = query(globalChatCollectionRef, orderBy('createdAt'));

            const unsubscribe = onSnapshot(q, async (snapshot) => {
                const fetchedMessages = [];
                for (const docSnapshot of snapshot.docs) {
                    const msg = { id: docSnapshot.id, ...docSnapshot.data() };
                    let senderName = 'Usuário Desconhecido';
                    let senderProfileImageUrl = '';

                    if (msg.senderId) {
                        try {
                            const profileDocRef = doc(appState.db, `artifacts/${appState.projectId}/users/${msg.senderId}/profiles`, 'myProfile');
                            const profileDocSnap = await getDoc(profileDocRef);
                            if (profileDocSnap.exists()) {
                                const profileData = profileDocSnap.data();
                                senderName = profileData.name || senderName;
                                senderProfileImageUrl = profileData.profileImageUrl || '';
                            } else {
                                console.warn(`Documento de perfil 'myProfile' não encontrado para o UID: ${msg.senderId}`);
                            }
                        } catch (profileError) {
                            console.error(`Erro ao buscar perfil do remetente ${msg.senderId}:`, profileError);
                        }
                    } else {
                        console.warn('Mensagem sem senderId definido:', msg);
                    }
                    fetchedMessages.push({
                        ...msg,
                        senderName,
                        senderProfileImageUrl,
                        createdAt: msg.createdAt?.toDate().toLocaleString('pt-BR') || 'agora'
                    });
                }

                loadingMessagesMessage.classList.add('hidden');
                if (fetchedMessages.length === 0) {
                    noMessagesMessage.classList.remove('hidden');
                } else {
                    noMessagesMessage.classList.add('hidden');
                }

                messagesListDiv.innerHTML = ''; // Clear before re-rendering
                fetchedMessages.forEach(msg => {
                    const messageElement = document.createElement('div');
                    messageElement.className = `mb-2 ${msg.senderId === appState.userId ? 'text-right' : 'text-left'}`;
                    messageElement.innerHTML = `
                        <div class="inline-block p-2 rounded-lg ${msg.senderId === appState.userId ? 'bg-indigo-500 text-white' : 'bg-gray-300 text-gray-800'}">
                            <div class="flex items-center mb-1 ${msg.senderId === appState.userId ? 'flex-row-reverse' : 'flex-row'}">
                                <img
                                    src="${msg.senderProfileImageUrl || 'https://placehold.co/24x24/cccccc/333333?text=PF'}"
                                    alt="Foto do Remetente"
                                    class="w-6 h-6 rounded-full object-cover border border-gray-400 cursor-pointer ${msg.senderId === appState.userId ? 'ml-2' : 'mr-2'}"
                                    onerror="this.onerror=null;this.src='https://placehold.co/24x24/cccccc/333333?text=PF';"
                                />
                                <span class="font-semibold text-sm">${msg.senderName || 'Usuário Desconhecido'}</span>
                            </div>
                            <p class="text-sm">${msg.text}</p>
                            ${msg.senderId === appState.userId ? `
                                <div class="flex justify-end space-x-2 mt-2">
                                    <button data-message-id="${msg.id}" data-message-text="${msg.text}" class="edit-message-btn px-2 py-1 bg-blue-500 text-white rounded-lg text-xs hover:bg-blue-600 transition duration-200">
                                        Editar
                                    </button>
                                    <button data-message-id="${msg.id}" class="delete-message-btn px-2 py-1 bg-red-500 text-white rounded-lg text-xs hover:bg-red-600 transition duration-200">
                                        Apagar
                                    </button>
                                </div>
                            ` : ''}
                        </div>
                        <div class="text-xs text-gray-500 mt-1">${msg.createdAt}</div>
                    `;
                    messagesListDiv.appendChild(messageElement);

                    // Attach event listener for photo modal
                    messageElement.querySelector('img').onclick = () => showPhotoModal(msg.senderProfileImageUrl);

                    // Attach event listeners for edit/delete buttons
                    if (msg.senderId === appState.userId) {
                        messageElement.querySelector('.edit-message-btn').addEventListener('click', (e) => {
                            const messageId = e.target.dataset.messageId;
                            const messageText = e.target.dataset.messageText;
                            editChatMessage(messageId, messageText, messageElement);
                        });
                        messageElement.querySelector('.delete-message-btn').addEventListener('click', (e) => {
                            const messageId = e.target.dataset.messageId;
                            showConfirmationModal('Tem certeza que deseja apagar esta mensagem?',
                                () => deleteChatMessage(messageId),
                                () => showMessage('Exclusão de mensagem cancelada.', 'info')
                            );
                        });
                    }
                });
                messagesListDiv.scrollTop = messagesListDiv.scrollHeight; // Scroll to bottom
            }, (error) => {
                console.error("Erro ao buscar mensagens do chat global:", error);
                showMessage("Erro ao carregar mensagens do chat global.", "error");
                loadingMessagesMessage.classList.add('hidden');
                noMessagesMessage.classList.remove('hidden');
            });

            appState.activeListeners.push(unsubscribe); // Store unsubscribe function
        }

        sendMessageBtn.addEventListener('click', sendChatMessage);
        chatMessageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendChatMessage();
            }
        });

        /**
         * Sends a new message to the global chat.
         */
        async function sendChatMessage() {
            const messageText = chatMessageInput.value.trim();
            if (messageText === '' || !appState.db || !appState.userId || !appState.projectId) {
                return;
            }

            sendMessageBtn.disabled = true;
            sendMessageBtn.textContent = 'Enviando...';

            try {
                await addDoc(collection(appState.db, `artifacts/${appState.projectId}/public/data/global_chat_messages`), {
                    text: messageText,
                    senderId: appState.userId,
                    createdAt: serverTimestamp(),
                });
                chatMessageInput.value = '';
            } catch (error) {
                console.error('Erro ao enviar mensagem:', error);
                showMessage('Erro ao enviar mensagem.', 'error');
            } finally {
                sendMessageBtn.disabled = false;
                sendMessageBtn.textContent = 'Enviar';
            }
        }

        /**
         * Enables editing for a chat message.
         * @param {string} messageId The ID of the message to edit.
         * @param {string} currentText The current text of the message.
         * @param {HTMLElement} messageElement The DOM element of the message.
         */
        function editChatMessage(messageId, currentText, messageElement) {
            const textParagraph = messageElement.querySelector('.text-sm');
            const actionsDiv = messageElement.querySelector('.flex.justify-end');

            const originalText = textParagraph.textContent;

            const textarea = document.createElement('textarea');
            textarea.className = "w-full px-2 py-1 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 resize-none text-gray-800";
            textarea.value = currentText;
            textarea.rows = 2;

            const saveBtn = document.createElement('button');
            saveBtn.className = "px-2 py-1 bg-green-500 text-white rounded-lg text-xs hover:bg-green-600 transition duration-200";
            saveBtn.textContent = 'Salvar';

            const cancelBtn = document.createElement('button');
            cancelBtn.className = "px-2 py-1 bg-gray-500 text-white rounded-lg text-xs hover:bg-gray-600 transition duration-200 ml-2";
            cancelBtn.textContent = 'Cancelar';

            textParagraph.replaceWith(textarea);
            actionsDiv.innerHTML = '';
            actionsDiv.appendChild(saveBtn);
            actionsDiv.appendChild(cancelBtn);

            saveBtn.onclick = async () => {
                const newText = textarea.value.trim();
                if (newText === '') {
                    showMessage('Mensagem não pode ser vazia.', 'error');
                    return;
                }
                saveBtn.disabled = true;
                saveBtn.textContent = 'Salvando...';
                try {
                    const messageRef = doc(appState.db, `artifacts/${appState.projectId}/public/data/global_chat_messages`, messageId);
                    await updateDoc(messageRef, {
                        text: newText,
                        updatedAt: serverTimestamp(),
                    });
                    showMessage('Mensagem atualizada!', 'success');
                } catch (error) {
                    console.error('Erro ao atualizar mensagem:', error);
                    showMessage('Erro ao atualizar mensagem.', 'error');
                } finally {
                    loadGlobalChatMessages(); // Re-render to show updated state
                }
            };

            cancelBtn.onclick = () => {
                textarea.replaceWith(textParagraph);
                actionsDiv.innerHTML = `
                    <button data-message-id="${messageId}" data-message-text="${originalText}" class="edit-message-btn px-2 py-1 bg-blue-500 text-white rounded-lg text-xs hover:bg-blue-600 transition duration-200">
                        Editar
                    </button>
                    <button data-message-id="${messageId}" class="delete-message-btn px-2 py-1 bg-red-500 text-white rounded-lg text-xs hover:bg-red-600 transition duration-200">
                        Apagar
                    </button>
                `;
                // Re-attach event listeners for restored buttons
                messageElement.querySelector('.edit-message-btn').addEventListener('click', (e) => {
                    const messageId = e.target.dataset.messageId;
                    const messageText = e.target.dataset.messageText;
                    editChatMessage(messageId, messageText, messageElement);
                });
                messageElement.querySelector('.delete-message-btn').addEventListener('click', (e) => {
                    const messageId = e.target.dataset.messageId;
                    showConfirmationModal('Tem certeza que deseja apagar esta mensagem?',
                        () => deleteChatMessage(messageId),
                        () => showMessage('Exclusão de mensagem cancelada.', 'info')
                    );
                });
            };
        }

        /**
         * Deletes a chat message.
         * @param {string} messageId The ID of the message to delete.
         */
        async function deleteChatMessage(messageId) {
            if (!appState.db || !appState.projectId || !messageId) {
                showMessage('Erro: Não foi possível apagar a mensagem.', 'error');
                return;
            }
            try {
                await deleteDoc(doc(appState.db, `artifacts/${appState.projectId}/public/data/global_chat_messages`, messageId));
                showMessage('Mensagem apagada!', 'success');
            } catch (error) {
                console.error('Erro ao apagar mensagem:', error);
                showMessage('Erro ao apagar mensagem.', 'error');
            }
        }


        // --- Bottom Navigation Logic ---

        document.getElementById('nav-home-btn').addEventListener('click', () => switchScreen('home-screen'));
        document.getElementById('nav-profile-btn').addEventListener('click', () => switchScreen('profile-screen'));
        document.getElementById('nav-global-chat-btn').addEventListener('click', () => switchScreen('global-chat-screen'));
        document.getElementById('nav-logout-btn').addEventListener('click', async () => {
            try {
                await signOut(appState.auth);
                showMessage('Deslogado com sucesso!', 'success');
            } catch (error) {
                console.error('Erro ao deslogar:', error);
                showMessage('Erro ao deslogar.', 'error');
            }
        });

        // --- Initial Setup ---
        // This function runs when the page is fully loaded.
        document.addEventListener('DOMContentLoaded', () => {
            initializeFirebase();
            // Populate datalists on initial load
            populateLocationDatalist('location-suggestions-filter-datalist');
            populateLocationDatalist('profile-location-suggestions-datalist');
            populateLocationDatalist('create-event-location-suggestions-datalist');
            populateLocationDatalist('edit-event-location-suggestions-datalist');
        });

    </script>
</body>
</html>
